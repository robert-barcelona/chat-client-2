{"version":3,"sources":["App.js","index.js"],"names":["GET_CONVERSATION_CREDENTIALS","gql","_templateObject","GET_CONVERSATIONS","_templateObject2","SEND_MESSAGE","_templateObject3","GET_SESSION_ID","_templateObject4","GET_SESSION_TOKEN","_templateObject5","App","state","message","messageRef","React","createRef","setMessage","e","_this","setState","target","value","client","this","props","sessionToken","localStorage","getItem","sessionID","writeData","data","_this2","_this$state","react_default","a","createElement","react_apollo_esm","query","_ref","error","loading","console","log","getConversationCredentials","readQuery","setItem","className","concat","toString","mutation","refetchQueries","variables","sendMessage","_ref2","onSubmit","_ref3","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","preventDefault","t0","current","stop","_x","apply","arguments","ref","onChange","type","placeholder","conversationFragment","reply","addlData","map","i","key","_ref4","getConversations","convo","added","Component","withApollo","errorLink","onError","graphQLErrors","networkError","locations","path","cache","InMemoryCache","ApolloClient","link","HttpLink","uri","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9fc0dd44.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport gql from 'graphql-tag'\nimport {Query, Mutation, withApollo} from 'react-apollo';\nimport './main.scss'\n\nconst GET_CONVERSATION_CREDENTIALS = gql`\n  query GetConversationCredentials {\n    getConversationCredentials {\n      sessionToken\n      sessionID\n    }\n  }\n`\nconst GET_CONVERSATIONS = gql`\n  query GetConversations($sessionID:String!) {\n    getConversations(sessionID:$sessionID) {\n      message\n      reply\n      added\n    }\n  }\n`\n\n\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($sessionToken: String!, $sessionID: String!,$message:String!) {\n    sendMessage(sessionToken: $sessionToken, sessionID: $sessionID,message:$message) {\n      addlData\n      conversationFragment {\n        reply\n      }\n    }\n  }\n`\n\nconst GET_SESSION_ID = gql`\n  {\n    sessionID @client\n  }\n`\n\n\nconst GET_SESSION_TOKEN = gql`\n  {\n    sessionToken @client\n  }\n`\n\nclass App extends Component {\n\n  state = {\n\n    message: '',\n  }\n\n  messageRef = React.createRef()\n\n  setMessage = e => {\n    this.setState({message: e.target.value});\n  }\n\n  componentDidMount() {\n    const {props: {client}} = this\n\n    const sessionToken = localStorage.getItem('sessionToken')\n    const sessionID = localStorage.getItem('sessionID')\n    if (sessionToken && sessionID) client.writeData({data: {sessionToken, sessionID}})\n  }\n\n  render() {\n\n    let {state: {message, sessionToken, sessionID}} = this\n\n    return (\n      <Query query={GET_CONVERSATION_CREDENTIALS}>\n        {({data, error, loading, client}) => {\n          console.log('getConversationCredentials',data, error)\n          if (data && data.getConversationCredentials && (!sessionID || !sessionToken)) {\n            sessionID = client.readQuery({query: GET_SESSION_ID}).sessionID || data.getConversationCredentials.sessionID\n            sessionToken = client.readQuery({query: GET_SESSION_TOKEN}).sessionToken || data.getConversationCredentials.sessionToken\n            localStorage.setItem('sessionID', sessionID)\n            localStorage.setItem('sessionToken', sessionToken)\n            console.log('processing data', data.getConversationCredentials, 'sessionID', sessionID, 'sessionToken', sessionToken)\n            if (sessionToken && sessionID) client.writeData({data: {sessionToken, sessionID}})\n          }\n\n          if (loading) return 'Loading...'\n          if (error) return <div className='message is-warning'>\n            <div className=\"message-header\">\n              {`Error in GET_CONVERSATION_CREDENTIALS Query: ${error.toString()}`}</div>\n          </div>\n\n          return (\n            <div className=\"container main\">\n              <div className='hero'>\n                <div className='hero-body has-background-warning'>Chatomatic 2000</div>\n              </div>\n              <div className='columns'>\n                <div className='column is-two-thirds'>\n\n                  <Mutation mutation={SEND_MESSAGE} refetchQueries={() => [{\n                    query: GET_CONVERSATIONS,\n                    variables: {sessionID}\n                  }]}>\n                    {(sendMessage, {data, error, loading, client}) => {\n                      console.log('mutation data', data)\n                      return (<div className='columns'>\n                        <div className='column is-half'>\n                          {error && <div className='message is-warning'>\n                            <div className=\"message-header\">\n                              {`Error in SEND_MESSAGE Mutation: ${error.toString()}`}</div>\n                          </div>}\n                          <form\n                            onSubmit={\n                              async e => {\n                                e.preventDefault()\n                                try {\n                                  if (message) await sendMessage({variables: {sessionToken, sessionID, message}})\n                                } catch (error) {\n                                  console.log(error.message)\n                                }\n                                if (this.messageRef.current) this.messageRef.current.value = ''\n\n                              }\n                            }>\n\n                            <div className=\"field\">\n                              <p className=\"control has-icons-left has-icons-right\">\n                                <input ref={this.messageRef} value={message} onChange={this.setMessage}\n                                       className=\"input\"\n                                       type=\"text\"\n                                       placeholder=\"Message...\"/>\n                                <span className=\"icon is-small is-left\">\n        <i className=\"fas fa-pencil\"></i>\n        </span>\n\n                              </p>\n                            </div>\n\n                            <div className=\"field\">\n                              <p className=\"control\">\n                                <button className=\"button is-success\">\n                                  Send\n                                </button>\n                              </p>\n                            </div>\n\n                          </form>\n                          {loading && <h3>Writing...</h3>}\n                        </div>\n                        <div className='column is-half'>\n                          {data && data.sendMessage && data.sendMessage.conversationFragment &&\n                          <div className='reply  has-text-white'><span className='reply-title'>Chatomatic says: </span>{data.sendMessage.conversationFragment.reply}\n                          </div>}\n                        {data && data.sendMessage &&  <div className='reply  has-text-white'>{ data.sendMessage.addlData.map((data, i) => <div\n                            key={i}>{data}</div>)}</div>}\n                        </div>\n                      </div>)\n\n\n                    }}\n\n                  </Mutation>\n                </div>\n                <div className='column is-one-third'>\n                  <Query\n                    query={GET_CONVERSATIONS}\n                    variables={{sessionID}}>\n                    {({data, loading, error}) => {\n\n                      if (error) return error.message\n                      if (loading) return 'Loading...'\n                      return (\n\n                        <div className='list'>\n                          {data && data.getConversations && data.getConversations.map((convo, i) =>\n                            <div className='list-item history' key={i}><span\n                              className=' history-message'><span className='has-text-success history-message-title'>You: </span>{convo.message}</span>\n                              <br/><span\n                                className='history-reply'><span className='has-text-success history-reply-title'>Chatomatic: </span>{convo.reply}</span>\n                              <br/>\n                              <span className='history-date'>{convo.added}</span>\n                            </div>)}\n                        </div>\n                      )\n                    }}\n\n\n                  </Query>\n\n\n                </div>\n\n              </div>\n            </div>)\n        }\n\n        }\n\n      </Query>\n\n\n    )\n  }\n}\n\nexport default withApollo(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo';\n\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from \"apollo-link-error\";\n\nimport App from './App'\n\nimport 'bulma/css/bulma.css'\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst cache = new InMemoryCache()\n\ncache.writeData({data:{sessionID:'',sessionToken:''}})\n\nconst client = new ApolloClient({\n  link:errorLink.concat(new HttpLink({ uri:'https://limitless-atoll-59109.herokuapp.com/graphql' })),\n  cache,\n});\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}